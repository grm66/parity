#! /usr/bin/env bash

SELF=$0

PACKAGE="@PACKAGE@"
VERSION="@VERSION@"

PARITYprefix="@prefix@"
PARITYsysconfdir="@PARITY_SYSCONFDIR@"
PARITYlocalstatedir="@PARITY_LOCALSTATEDIR@"
PARITYlibdir="@PARITY_LIBDIR@"
PARITYbindir="@PARITY_BINDIR@"
PARITYincludedir="@PARITY_INCLUDEDIR@"
PARITYsupported_archs="@PARITY_SUPPORTED_ARCHS@"
PARITYsupported_versions="@PARITY_SUPPORTED_VERSIONS@"
PARITYsupported_runtimes="@PARITY_SUPPORTED_RUNTIMES@"
PARITYrexsupport="@PARITY_REX_SUPPORT@"

DESTDIR=

if [[ ${PARITYsysconfdir} == @*@ ]]
then
	SELFDIR=$(cd "$(dirname "${SELF}")" && pwd)

	PARITYsysconfdir=${SELFDIR}/..
	PARITYlocalstatedir=${SELFDIR}/..
	PARITYlibdir=${SELFDIR}/..
	PARITYbindir=${SELFDIR}/..
	PARITYincludedir=${SELFDIR}/..

	# <loaded from parity-setup.in by Confix2.dir>
	PARITYsupported_archs="x86 x64"
	PARITYsupported_runtimes="dynamic static dynamicdebug staticdebug"
	#  7.0:	Visual Studio 2002, cl.exe Version 13.00
	#  7.1:	Visual Studio 2003, cl.exe Version 13.10
	#  8.0:	Visual Studio 2005, cl.exe Version 14.00
	#  9.0:	Visual Studio 2008, cl.exe Version 15.00
	# 10.0:	Visual Studio 2010, cl.exe Version 16.00
	# 11.0:	Visual Studio 2012, cl.exe Version 17.00
	# 12.0:	Visual Studio 2013, cl.exe Version 18.00
	# 13.0: there is no msvc version 13.0
	# 14.0:	Visual Studio 2015, cl.exe Version 19.00
	#
	# Starting with Visual Studio 2017, updates may bump
	# the minor version we search for using vswhere.exe.
	# We probably do not need a CHOST per minor version,
	# so we omit the minor version instead.
	#
	# 15: Visual Studio 2017, latest installed minor version
	# 16: Visual Studio 2019, latest installed minor version
	#
	PARITYsupported_versions="7.0 7.1 8.0 9.0 10.0 11.0 12.0 14.0 15 16"
	# </loaded from parity-setup.in by Confix2.dir>

	CC=${SELFDIR}/../parity.gnu.gcc/parity.gnu.gcc
	AR=${SELFDIR}/../parity.gnu.ar/parity.gnu.ar.in
else
	CC=${PARITYbindir}/parity.gnu.gcc
	AR=${PARITYbindir}/parity.gnu.ar
fi

defrexsupport=${PARITYrexsupport}

PARITYheader="# This file is part of ${PACKAGE}-${VERSION}"

usage() {
	cat <<EOF
${SELF##*/} [options] action [hosttriplet...]
EOF
}

parityconf-help() {
	cat <<EOF
${SELF##*/} [options] action [hosttriplet...]

Where options is a combination of:
  --quiet   No progress output at all.
  --verbose More progress output.
  --debug   Enable shell trace.

  --destdir dir
    Operate in staging directory dir.
$([[ ${defrexsupport} == *abled ]] && echo "
  --remote-execution-support [yes|no]
    Support Remote EXecution service (https://github.com/mduft/rex).
    Default is: $([[ ${defrexsupport} == enabled ]] && echo yes || echo no)
 ")\

Where action is one of:

  --help
     This help.

  --list-supported
      List any hosttriplet identifiers supported.
      Unless --quiet, progress output goes to standard error.

  --list-available
      List hosttriplet identifiers for installed MSVC compilers found.
      Unless --quiet, progress output goes to standard error.

  --is-available hosttriplet
      Test if MSVC compiler for hosttriplet identifier is installed.
      Unless --quiet, progress output goes to standard error.

  --get-environ [--bare] hosttriplet
      Display the environment variables and their values required to
      enable the vanilla MSVC toolchain in some shell environment,
      formatted as "VAR VALUE" without any quoting.  Without --bare,
      VALUE is prepended to eventually existing environment VAR.

  --enable hosttriplet...
      Enables configuration for hosttriplet identifiers.

  --enable-all
      Enables configuration for all available hosttriplet identifiers.

  --disable hosttriplet...
      Disables configuration for hosttriplet identifiers.

  --disable-all
      Disables configuration for all supported hosttriplet identifiers.

Additional actions for package managers:

  --install
     Creates all files for all supported configurations, but disabled.

  --uninstall
     Removes all files for all supported configurations.

Where hosttriplet is:

  Known as "arch-vendor-os" or even "arch-vendor-os-libc".
  Use --list-supported to get an idea of possible values.

EOF
}

unittests=()
parityconf-unittest() {
	local unittest success=0
	for unittest in "${unittests[@]}"
	do
		if ( ${unittest} )
		then
			echo " OK : ${unittest}"
		else
			echo "FAIL: ${unittest}"
			success=1
		fi
	done
	return ${success}
}

# get-vscrt [end-of-chost|[vsarch-][vsver-]vscrt]
#  The argument needs to contain enough information only.
# Examples:
#  get-vscrt i686-libcmt11.0-mingw32  -> libcmt
#  get-vscrt i686-libcmtd11.0-mingw32 -> libcmtd
#  get-vscrt i686-msvc11-mingw32      -> msvc
#  get-vscrt i686-msvcd11-mingw32     -> msvcd
#  get-vscrt i686-libcmt11.0-winnt    -> libcmt
#  get-vscrt i686-msvc11.0-winnt      -> msvc
#  get-vscrt i686-msvcd11-winnt       -> msvcd
#  get-vscrt x86-libcmt11.0           -> libcmt
#  get-vscrt x86-msvc11.0             -> msvc
#  get-vscrt libcmt11                 -> libcmt
#  get-vscrt static                   -> libcmt
#  get-vscrt staticdebug              -> libcmtd
#  get-vscrt dynamic                  -> msvc
#  get-vscrt dynamicdebug             -> msvcd
#  get-vscrt junk                     -> msvc
get-vscrt() {
	local vscrt=${1}
	case ${vscrt} in
	libcmtd*|*-libcmtd*|staticdebug) echo "libcmtd" ;;
	libcmt*|*-libcmt*|static) echo "libcmt" ;;
	msvcd*|*-msvcd*|dynamicdebug) echo "msvcd" ;;
	*) echo "msvc" ;;
	esac
	return 0
}
test_get-vscrt() {
	local input expected output ret=0
	for input in \
		libcmt:i686-libcmt11.0-mingw32   \
		libcmtd:i686-libcmtd11.0-mingw32 \
		msvc:i686-msvc11-mingw32         \
		libcmt:i686-libcmt11.0-winnt     \
		msvc:i686-msvc11.0-winnt         \
		msvc:i686-msvc11-winnt           \
		libcmt:x86-libcmt11.0            \
		msvc:x86-msvc11.0                \
		msvc:msvc11                      \
		msvcd:msvcd11                    \
		msvc:dynamic                     \
		msvcd:dynamicdebug               \
		libcmt:static                    \
		libcmtd:staticdebug              \
		msvc:junk                        \
	; do
		expected=${input%:*}
		input=${input#*:}
		output=$(get-vscrt "${input}")
		if [[ ${output} == "${expected}" ]]; then
			verbose "  OK  : get-vscrt '${input}' returns '${output}'"
		else
			ret=1
			verbose " FAIL : get-vscrt '${input}' returns '${output}', expected '${expected}'"
		fi
	done
	return ${ret}
}
unittests+=( test_get-vscrt )

# get-vsver [end-of-chost|[vsarch-][vscrt]vsver]
#  The argument needs to contain enough information only.
# Examples:
#  get-vsver i686-msvc11.0-mingw32  -> 11.0
#  get-vsver i686-msvcd11.0-mingw32 -> 11.0
#  get-vsver i686-msvc11-mingw32    -> 11.0
#  get-vsver i686-libcmt11.0-winnt  -> 11.0
#  get-vsver i686-libcmtd11.0-winnt -> 11.0
#  get-vsver i686-msvc11.0-winnt    -> 11.0
#  get-vsver i686-msvc11-winnt      -> 11.0
#  get-vsver i686-msvcd11-winnt     -> 11.0
#  get-vsver x86-msvc11.0           -> 11.0
#  get-vsver libcmtd11              -> 11.0
#  get-vsver libcmt11               -> 11.0
#  get-vsver msvcd11                -> 11.0
#  get-vsver msvc11                 -> 11.0
#  get-vsver x86-msvc15.0           -> 15
get-vsver() {
	local vscrt=$(get-vscrt "$1")
	local vsver=${1##*${vscrt}}
	vsver=${vsver%%-*}
	case ${vsver} in
	            1[5-9].*        ) echo "${vsver%.*}" ;;
	            1[5-9]          ) echo "${vsver}" ;;
	[7-9]      |1[0-4]          ) echo "${vsver}.0" ;;
	[7-9].[0-9]|[1-9][0-9].[0-9]) echo "${vsver}" ;;
	esac
	return 0
}
test_get-vsver() {
	local input expected output ret=0
	for input in \
		11.0:i686-msvc11.0-mingw32  \
		11.0:i686-msvcd11.0-mingw32 \
		11.0:i686-msvc11-mingw32    \
		11.0:i686-msvcd11-mingw32   \
		11.0:i686-libcmt11.0-winnt  \
		11.0:i686-libcmtd11.0-winnt \
		11.0:i686-msvc11.0-winnt    \
		11.0:i686-msvcd11.0-winnt   \
		11.0:i686-msvc11-winnt      \
		11.0:i686-msvcd11-winnt     \
		11.0:x86-msvc11.0           \
		11.0:x86-msvcd11.0          \
		11.0:libcmt11.0             \
		11.0:libcmtd11.0            \
		11.0:libcmt11               \
		11.0:libcmtd11              \
		11.0:msvc11.0               \
		11.0:msvcd11.0              \
		11.0:msvc11                 \
		11.0:msvcd11                \
		15:x86-msvcd15.0            \
	; do
		expected=${input%:*}
		input=${input#*:}
		output=$(get-vsver "${input}")
		if [[ ${output} == "${expected}" ]]; then
			verbose "  OK  : get-vsver '${input}' returns '${output}'"
		else
			ret=1
			verbose " FAIL : get-vsver '${input}' returns '${output}', expected '${expected}'"
		fi
	done
	return ${ret}
}
unittests+=( test_get-vsver )

# get-vsarch [begin-of-chost|vsarch[-vsver]]
#  The argument needs to contain enough information only.
# Examples:
#  get-vsarch i686-msvc11.0-winnt      -> x86
#  get-vsarch i686-msvcd11.0-winnt     -> x86
#  get-vsarch i686-msvc11.0-mingw32    -> x86
#  get-vsarch i686-libcmtd11.0-winnt   -> x86
#  get-vsarch x86-msvc11.0             -> x86
#  get-vsarch i686                     -> x86
#  get-vsarch x86_64-libcmtd11.0-winnt -> x64
#  get-vsarch x86_64                   -> x64
get-vsarch() {
	local vsarch=${1%%-*}
	case ${vsarch} in
	x64|amd64|x86_64) echo "x64" ;;
	x86|i?86)         echo "x86" ;;
	esac
	return 0
}
test_get-vsarch() {
	local input expected output ret=0
	for input in \
		x86:i686-msvc11.0-winnt      \
		x86:i686-msvcd11.0-mingw32   \
		x86:x86-msvc11.0             \
		x86:i686                     \
		x64:x86_64                   \
		x86:i686-libcmtd11.0-winnt   \
	; do
		expected=${input%:*}
		input=${input#*:}
		output=$(get-vsarch "${input}")
		if [[ ${output} == "${expected}" ]]; then
			verbose "  OK  : get-vsarch '${input}' returns '${output}'"
		else
			ret=1
			verbose " FAIL : get-vsarch '${input}' returns '${output}', expected '${expected}'"
		fi
	done
	return ${ret}
}
unittests+=( test_get-vsarch )

get-supported-vsvers() {
	local vsvers=( ${PARITYsupported_versions} )
    local vsver
    for vsver in "${vsvers[@]}"
    do
		get-vsver "${vsver}"
    done
    return 0
}

get-supported-vscrts() {
    local vscrts=( ${PARITYsupported_runtimes} )
    local vscrt
    for vscrt in "${vscrts[@]}"
    do
		get-vscrt "${vscrt}"
    done
    return 0
}

get-supported-vsarchs() {
    local vsarch
    for vsarch in ${PARITYsupported_archs}
    do
		get-vsarch "${vsarch}"
    done
    return 0
}

# get-chost [begin[+end]-of-chost|vsarch[-[vscrt]vsver]]
# Examples:
#  get-chost i686-libcmt11.0  -> i686-libcmt11.0-winnt
#  get-chost i686-libcmtd11.0 -> i686-libcmtd11.0-winnt
#  get-chost i686-msvc11.0    -> i686-msvc11.0-winnt
#  get-chost i686-msvcd11.0   -> i686-msvcd11.0-winnt
#  get-chost x86-libcmt11     -> i686-libcmt11.0-winnt
#  get-chost x86-msvc11       -> i686-msvc11.0-winnt
#  get-chost i686-libcmt      -> i686-libcmt-winnt
#  get-chost i686-msvc        -> i686-msvc-winnt
#  get-chost i686-msvcd       -> i686-msvcd-winnt
#  get-chost i686-libcmt      -> i686-libcmt-winnt
#  get-chost i686-libcmtd     -> i686-libcmtd-winnt
#  get-chost i686             -> i686-msvc-winnt
get-chost() {
	local vsarch=$(get-vsarch "$*")
	local vsver=$(get-vsver "$*")
	local vscrt=$(get-vscrt "$*")
	case ${vsarch} in
	x86) echo "i686-${vscrt}${vsver}-winnt" ;;
	x64) echo "x86_64-${vscrt}${vsver}-winnt" ;;
	esac
	return 0
}
test_get-chost() {
	local input expected output ret=0
	for input in \
	    i686-libcmt11.0-winnt:i686-libcmt11.0             \
	    i686-libcmtd11.0-winnt:i686-libcmtd11.0           \
	    i686-msvc11.0-winnt:i686-msvc11.0                 \
	    i686-msvcd11.0-winnt:i686-msvcd11.0               \
	    i686-libcmt11.0-winnt:i686-libcmt11.0             \
	    i686-msvc11.0-winnt:i686-msvc11.0                 \
	    i686-libcmt11.0-winnt:x86-libcmt11                \
	    i686-msvc11.0-winnt:x86-msvc11                    \
	    i686-libcmt-winnt:i686-libcmt                     \
	    i686-msvc-winnt:i686-msvc                         \
	    i686-msvc-winnt:i686                              \
	    x86_64-libcmtd11.0-winnt:x86_64-libcmtd11.0-winnt \
	    x86_64-libcmtd-winnt:x86_64-libcmtd               \
	    x86_64-msvc-winnt:x64-msvc                        \
	; do
		expected=${input%:*}
		input=${input#*:}
		output=$(get-chost "${input}")
		if [[ ${output} == "${expected}" ]]; then
			verbose "  OK  : get-chost '${input}' returns '${output}'"
		else
			ret=1
			verbose " FAIL : get-chost '${input}' returns '${output}', expected '${expected}'"
		fi
	done
	return ${ret}
}
unittests+=( test_get-chost )

get-supported-chosts() {
	local vsarch vsver vscrt
	for vsarch in $(get-supported-vsarchs)
	do
		for vsver in $(get-supported-vsvers)
		do
			for vscrt in $(get-supported-vscrts)
			do
				get-chost "${vsarch}-${vscrt}${vsver}"
			done
		done
	done
	return 0
}

#
# Cached value, allows to match with *" <chost> "*
#
SUPPORTED_CHOSTS=" $(echo $(get-supported-chosts) ) "
is-supported-chost() {
	[[ ${SUPPORTED_CHOSTS} == *" ${1:-none} "* ]]
}

get-supported-executables() {
	local chost=$(get-chost "$1")

	local vsarch=$(get-vsarch "${chost}")
	local vsver=$(get-vsver "${chost}")

	local vsexes=(
		'Compiler=cl.exe'
		'Linker=link.exe'
		'Manifest=mt.exe'
		'ResourceCompiler=rc.exe'
		'ResourceConverter=cvtres.exe'
	)
	case ${vsarch} in
	x86) vsexes+=( 'Assembler=ml.exe' ) ;;
	x64) vsexes+=( 'Assembler=ml64.exe' ) ;;
	esac
	printf "%s\n" "${vsexes[@]}"
	return 0
}

get-supported-sdklibs() {
	local sdklibs=(
		kernel32
		user32
		advapi32
		gdi32
		ws2_32
		shell32
		ole32
		winspool
		comctl32
		comdlg32
		userenv
		uuid
		legacy_stdio_definitions
	)
	local sdklib
	for sdklib in "${sdklibs[@]}"
	do
		echo "${sdklib}"
	done
}

get-parityflags() {
	local vsarch=$(get-vsarch "$*")
	local vsver=$(get-vsver "$*")
	local vscrt=$(get-vscrt "$*")
	case ${vsarch} in
	x86) echo "-m32 -m${vscrt}${vsver}" ;;
	x64) echo "-m64 -m${vscrt}${vsver}" ;;
	esac
	return 0
}

args-to-chosts() {
	local arg chost chosts=()
	for arg in "$@"
	do
		chost=$(get-chost "${arg}")
		is-supported-chost "${chost}" || die "Invalid configuration value '${arg}' (try --list-supported.)"
		chosts+=("${chost}")
	done
	echo "${chosts[@]}"
	return 0
}

NL="
"

die() {
	${1+:} false && echo "${SELF##*/}: $@" >&2
	exit 1
}

[[ -r "/proc/registry/HKEY_LOCAL_MACHINE/SOFTWARE/." ]] || die "Missing Cygwin based POSIX environment."

# https://cygwin.com/ml/cygwin/2019-08/msg00072.html
: ${SYSTEMDRIVE:=${SYSTEMROOT%%\\*}}
export SYSTEMDRIVE

windir=$(cygpath -W)
sysdir=$(cygpath -S)

eval "cmd() {
  ( set -x
	tmpfile=\`mktemp\`
	trap \"rm -f '\${tmpfile}' '\${tmpfile}.bat'\" 0
	mv -f \"\${tmpfile}\" \"\${tmpfile}.bat\"
	for x in \"\$@\"; do echo \"\$x\"; done > \"\${tmpfile}.bat\"
	chmod +x \"\${tmpfile}.bat\"
	PATH=\"${windir}:${sysdir}:${sysdir}/WBEM\" \"\${tmpfile}.bat\"
  )
}"

regquery() {
	regquery_result=
	if [[ -r /proc/registry/${1}/${2:-.}/. ]]
	then
		return 0
	fi
	if [[ -r /proc/registry/${1}/${2} ]]
	then
		regquery_result=`tr -d \\\\0 < "/proc/registry/${1}/${2}"`
		return $?
	fi
	return 1
}

regquery_vsroot() {
	local vsver=$(get-vsver "${1}")
	if regquery HKEY_LOCAL_MACHINE/SOFTWARE/Wow6432Node/Microsoft/VisualStudio/SxS/VS7 "${vsver}" \
	|| regquery HKEY_CURRENT_USER/SOFTWARE/Wow6432Node/Microsoft/VisualStudio/SxS/VS7 "${vsver}" \
	|| regquery HKEY_LOCAL_MACHINE/SOFTWARE/Microsoft/VisualStudio/SxS/VS7 "${vsver}" \
	|| regquery HKEY_CURRENT_USER/SOFTWARE/Microsoft/VisualStudio/SxS/VS7 "${vsver}" \
	; then
		regquery_vsroot_result=${regquery_result}
		return 0
	fi
	return 1
}

locate_vswhere_exe() {
	# Since Visual Studio 2019 there is the standalone "Visual Studio Installer"
	# package providing vswhere.exe, which does register itself to the registry.
	local vswhere_exe
	if regquery HKEY_LOCAL_MACHINE/SOFTWARE/Microsoft/VisualStudio/Setup SharedInstallationPath \
	&& vswhere_exe=$(dirname "$(cygpath -u "${regquery_result}")")/Installer/vswhere.exe \
	&& [[ -x ${vswhere_exe} ]] \
	; then
		locate_vswhere_exe_result=${vswhere_exe}
		return 0
	fi
	#
	# https://devblogs.microsoft.com/setup/vswhere-is-now-installed-with-visual-studio-2017/
	#
	local folderIDs=(
		42 # CSIDL_PROGRAM_FILESX86
		38 # CSIDL_PROGRAM_FILES
	)
	local folderID
	for folderID in ${folderIDs[*]}
	do
		vswhere_exe="$(cygpath -F ${folderID})/Microsoft Visual Studio/Installer/vswhere.exe"
		[[ -x ${vswhere_exe} ]] || continue
		locate_vswhere_exe_result=${vswhere_exe}
		return 0
	done
	locate_vswhere_exe_result=
	return 1
}

vswhere() {
	# initial vswhere() does set up location of vswhere.exe
	if locate_vswhere_exe; then
		# redefine vswhere() to execute vswhere.exe
		eval "vswhere() {
			vswhere_result=
			vswhere_result=\$(\"${locate_vswhere_exe_result}\" \"\$@\" | tr -d "\\\\r")
			return \$?
		}"
	else
		# missing vswhere.exe, redefine vswhere() as noop
		vswhere() {
			vswhere_result=
			return 1
		}
	fi
	# re-execute vswhere() to return results
	vswhere "$@"
	return $?
}

vswhere_installationPath() {
	local vsver=$(get-vsver "${1}")
	vswhere_installationPath_result=
	# Note that vswhere does require the user to be either an Administrator,
	# or a member of the "Distributed COM Users" local group.
	vswhere -nologo \
		-products "*" \
		-version "[${vsver},${vsver}.65535]" \
		-requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 \
		-latest \
		-format text \
		-property installationPath \
		|| return 1
	[[ ${vswhere_result} == 'installationPath: '* ]] || return 1
	vswhere_installationPath_result=${vswhere_result#installationPath: }
	return 0
}

query-novcvars-once() {
	[[ -z ${novcPATH-}${novcINCLUDE-}${novcLIB-}${novcLIBPATH-} ]] || return 0

	novcPATH= novcINCLUDE= novcLIB= novcLIBPATH=

	verbose "Querying environment without MSVC ..."
	local line var val
	while read line
	do
		case ${line} in
		PATH=* | INCLUDE=* | LIB=* | LIBPATH=* )
			var=${line%%=*}
			val=${line#*=}
			eval "novc${var}=\${val}"
			;;
		esac
	done < <(
		cmd '@set PATH & set INCLUDE & set LIB' 2>/dev/null \
		| sed -nE "s/\\r\$//; s,\\\\,/,g; /^(PATH|INCLUDE|LIB|LIBPATH)=/p"
	)

	if [[ -n ${novcPATH}${novcINCLUDE}${novcLIB}${novcLIBPATH} ]]
	then
		verbose "Querying environment without MSVC done."
		return 0
	fi
	noquiet "Querying environment without MSVC failed."
	return 1
}

query-vcvars() {
	local chost=$(get-chost "$1")
	is-supported-chost "${chost}" || return 1

	query-novcvars-once || die "Cannot get even initial environment."

	local vsver=$(get-vsver "${chost}")
	local vsarch=$(get-vsarch "${chost}")
	local vsroot=
	if vswhere_installationPath "${vsver}"; then
		vsroot=${vswhere_installationPath_result}
	elif regquery_vsroot "${vsver}"; then
		vsroot=${regquery_vsroot_result}
	else
		return 1
	fi

	noquiet "Querying environment for ${chost} ..."

	vcPATH= vcINCLUDE= vcLIB= vcLIBPATH=

	vsroot=$(cygpath -u "$vsroot")
	local vcvarsall
	vcvarsall=${vsroot}/VC/Auxiliary/Build/vcvarsall.bat
	[[ -r ${vcvarsall} ]] ||
	vcvarsall=${vsroot}/VC/vcvarsall.bat
	[[ -r ${vcvarsall} ]] || return 1

	# MSVC 10.0 and above query their VSxxCOMNTOOLS on their own
	local comntoolsvar=
	case ${vsver} in
	7.0) comntoolsvar=VS70COMNTOOLS ;;
	7.1) comntoolsvar=VS71COMNTOOLS ;;
	8.0) comntoolsvar=VS80COMNTOOLS ;;
	9.0) comntoolsvar=VS90COMNTOOLS ;;
	esac
	if [[ -n ${comntoolsvar} ]]
	then
		if regquery 'HKEY_LOCAL_MACHINE/SYSTEM/CurrentControlSet/Control/Session Manager/Environment' "${comntoolsvar}"
		then
			eval "export ${comntoolsvar}=\${regquery_result}"
		else
			unset ${comntoolsvar}
		fi
	fi

	local line var val
	while read line
	do
		case ${line} in
		PATH=* | INCLUDE=* | LIB=* | LIBPATH=* )
			var=${line%%=*}
			val=${line#*=}
			eval "vc${var}=\${val}"
			;;
		esac
	done < <(
		INCLUDE= LIB= LIBPATH= \
		cmd "@\"$(cygpath -w "${vcvarsall}")\" ${vsarch} && ( set PATH & set INCLUDE & set LIB )" 2>/dev/null \
		| sed -nE "s/\\r\$//; s,\\\\,/,g; /^(PATH|INCLUDE|LIB|LIBPATH)=/p"
    )
    vcPATH=${vcPATH%${novcPATH}};          vcPATH=${vcPATH%%;}
    vcINCLUDE=${vcINCLUDE%${novcINCLUDE}}; vcINCLUDE=${vcINCLUDE%%;}
    vcLIB=${vcLIB%${novcLIB}};             vcLIB=${vcLIB%%;}
    vcLIBPATH=${vcLIBPATH%${novcLIBPATH}}; vcLIBPATH=${vcLIBPATH%%;}

    if [[ ::${vcPATH}::${vcINCLUDE}::${vcLIB}::${vcLIBPATH}:: == *::::* ]]
	then
		# at least one of the variables is empty
		verbose "Querying environment for ${chost} failed."
		return 1
	fi
	verbose "Querying environment for ${chost} done."
	return 0
}

prune-parityconf() {
	local reason=disabled
	local noquiet=noquiet
	local uninstall=false
	local vaction='Disabling'
	while ${1+:} false
	do
		arg=$1
		shift
		case ${arg} in # (
		--reason=*)
			reason=${arg#--reason=}
			noquiet=verbose
			;; # (
		--uninstall)
			uninstall=:
			vaction='Uninstalling'
			;; # (
		*)
			break
			;;
		esac
	done

	local chost=$(get-chost "${arg}")
	is-supported-chost "${chost}" || return 1

	local vsver=$(get-vsver "${chost}")
	local vsarch=$(get-vsarch "${chost}")
	local vscrt=$(get-vscrt "${chost}")
	local conf="${vsarch}-${vscrt}${vsver}"

	(
		confdir="${PARITYlocalstatedir}"
		userconfdir="${PARITYsysconfdir}"

		if ${uninstall}
		then
			cd "${DESTDIR}/." || exit 0

			# When using parity-setup.in inside srcdir,
			# confdir and userconfdir are identical.
			# So remove all the known files first,
			# and the directories second.
			[[ -e .${confdir}/${conf} ]] &&
			rm -f ".${confdir}/${conf}/"parity.{conf,sh}

			if [[ -d .${confdir}/${conf}/lib ]]; then
				rm -f "./${confdir}/${conf}/lib/libparity."{runtime,loader}.a
			fi

			# Let rmdir yell if this is not a directory.
			[[ -e .${confdir}/${conf}/lib ]] &&
			rmdir "./${confdir}/${conf}/lib"

			[[ -e .${userconfdir}/${conf} ]] &&
			rm -f ".${userconfdir}/${conf}/parity.conf.sample"

			[[ -e .${confdir}/${conf} ]] &&
			rmdir ".${confdir}/${conf}"

			[[ -e .${userconfdir}/${conf} ]] &&
			rmdir ".${userconfdir}/${conf}"

			# be silent if confdir is missing or not empty
			rmdir ".${confdir}" 2>/dev/null
			rmdir ".${userconfdir}" 2>/dev/null

			exit 0
		fi

		${noquiet} "Disabling ${conf} ..."

		# any failure is a problem here
		set -e

		# do not mkdir -p DESTDIR, but confdir only
		cd "${DESTDIR}/."

		hostconfheader="${PARITYheader}
#
# PARITY CONFIGURATION for ${conf}
#"
		userconfheader="${PARITYheader}
#
# override parts of parity configuration for ${conf}
#"
		noconf="${vscrt} ${vsver} ${vsarch} (${chost}) is ${reason} (try ${SELF##*/} --enable ${chost})"

		mkdir -p ".${confdir}/${conf}"
		{
			echo "${hostconfheader}"
			echo "${noconf} = true"
		} > ".${confdir}/${conf}/parity.conf"
		{
			echo "${hostconfheader}"
			echo "echo '${noconf}' >&2"
			echo "false"
		} > ".${confdir}/${conf}/parity.sh"

		mkdir -p ".${userconfdir}/${conf}"
		{
			echo "${userconfheader}"
			echo "# For an idea how and what to override, the complete config is"
			echo "#  ${confdir}/${conf}/parity.conf"
			echo "#"
		} > ".${userconfdir}/${conf}/parity.conf.sample"

		mkdir -p ".${confdir}/${conf}/lib"

		: > ".${confdir}/${conf}/lib/libparity.loader.a"
		: > ".${confdir}/${conf}/lib/libparity.runtime.a"
	)
	if [[ $? -ne 0 ]]
	then
		${noquiet} "${vaction} ${chost} failed."
	else
		verbose "${vaction} ${chost} done."
	fi
	return $?
}

update-parityconf() {
	local chost=$(get-chost "$1")
	is-supported-chost "${chost}" || return 1

	if ! query-vcvars "${chost}"
	then
		prune-parityconf --reason="missing" "${chost}"
		return 1
	fi

	local vsver=$(get-vsver "${chost}")
	local vsarch=$(get-vsarch "${chost}")
	local vscrt=$(get-vscrt "${chost}")
	local parityflags=$(get-parityflags "${chost}")
	local confdir="${PARITYlocalstatedir}"
	local conf="${vsarch}-${vscrt}${vsver}"

	(
		noquiet "Configuring for ${conf} ..."

		set -e

		vcPATH=$(cygpath -up "${vcPATH}")
		vcINCLUDE=$(cygpath -up "${vcINCLUDE}")
		vcLIB=$(cygpath -up "${vcLIB}")
		vcLIBPATH=$(cygpath -up "${vcLIBPATH}")

		# set IFS before ${vcVAR} is evaluated
		IFS=: eval 'vcPATHdirs=( ${vcPATH} )'
		IFS=: eval 'vcINCLUDEdirs=( ${vcINCLUDE} )'
		IFS=: eval 'vcLIBdirs=( ${vcLIB} )'
		IFS=: eval 'vcLIBPATHdirs=( ${vcLIBPATH} )'

		# do not mkdir -p DESTDIR but confdir only
		cd "${DESTDIR}/."
		mkdir -p ".${confdir}"
		cd ".${confdir}"

		tmpdir=".${conf}.tmp.$$"
		rm -rf "./${tmpdir}"
		trap "rm -rf './${tmpdir}'" 0
		mkdir "./${tmpdir}"
		mkdir "./${tmpdir}/${conf}"
		mkdir "./${tmpdir}/${conf}/lib"

		# minimal ${conf}/parity.conf for the preprocessor
		# to query SDK versions and some Defines
		{
			echo "#
# PARITY CONFIGURATION for ${conf}
#
#  Automatically generated by ${SELF##*/}.
#  To regenerate, use ${SELF##*/} --enable ${chost}.
#

Colored = true"
            case ${PARITYrexsupport} in # (
            yes|enabled)
				echo "WaitForOutputFile = true"
				;; # (
            *)
				echo "WaitForOutputFile = false"
				;;
            esac

			get-supported-executables "${chost}" |
			while read line
			do
				case ${line} in # (
				=* | *=) ;; # (
				*=*)
					name=${line%%=*}
					executable=${line#*=}
					executable=$(
						find "${vcPATHdirs[@]}" \
							-maxdepth 1 \
							-iname "${executable}" \
							-print \
							-quit \
							2>/dev/null \
						|| :
					)
					echo "${name}Exe = ${executable}"
					;; # (
				*) ;;
				esac
			done

			for p in "${vcPATHdirs[@]}"
			do
				echo "AdditionalExecPaths = ${p}"
			done
			for p in "${vcINCLUDEdirs[@]}"
			do
				echo "SysIncludePaths = ${p}"
			done
			for p in "${vcLIBdirs[@]}"
			do
				echo "SysLibraryPaths = ${p}"
			done

			echo "
PCRTInclude = ${PARITYincludedir}/parity.runtime
PCRTLibrary = ${confdir}/${conf}/lib/libparity.runtime.a
ParityLoader = ${confdir}/${conf}/lib/libparity.loader.a

# for gcc -dumpmachine
HostTriplet = ${chost}
# for gcc -dumpversion
# for gcc -dumpfullversion
CompilerVersion = ${vsver}
# for gcc -print-prog-name=
KnownProgramsPath = ${PARITYprefix}/${chost}/bin
"
			case ${vsarch} in # (
			x86)
				echo "TimeT32Bit = true"
				;; # (
			*)
				echo "TimeT32Bit = false"
				;;
			esac

			for sdklib in $(get-supported-sdklibs "${chost}")
			do
				lib=$(
					find "${vcLIBdirs[@]}" \
						-maxdepth 1 \
						-iname "${sdklib}.lib" \
						-print \
						-quit \
						2>/dev/null \
					|| :
				)
				[[ -n ${lib} ]] || continue
				echo "ObjectsLibraries = ${lib}"
			done
		} > "./${tmpdir}/${conf}/parity.conf"

		verbose "Querying SDK versions ..."
		echo '
#if _MSC_VER - 0 >= 1600
# include <winsdkver.h>
#else
# include <sdkddkver.h>
#endif
#define PCRTSTR(x) #x
#define PCRTDEF(n) "Defines = " #n
#define PCRTDEFV(n, v) "Defines = " #n "=" PCRTSTR(v)
PCRTDEF(WIN32_LEAN_AND_MEAN)
#if            defined(_WIN32_WINNT_MAXVER) /* by <winsdkver.h> */
PCRTDEFV(_WIN32_WINNT, _WIN32_WINNT_MAXVER)
#elif          defined(_WIN32_WINNT) /* by <sdkddkver.h> */
PCRTDEFV(_WIN32_WINNT, _WIN32_WINNT)
#endif
		' | "${DESTDIR}${CC}" \
				"-mparityconfdir=./${tmpdir}" \
				${parityflags} \
				-E - \
		  | sed -n -e '/"Defines = "/{s/" "//g;s/"//g;p}' \
		  >> "./${tmpdir}/${conf}/parity.conf"
		[[ ${PIPESTATUS[*]} == '0 0 0' ]]

		{
			# The config parser does not understand split sections,
			# so we need to complete the global section before we
			# can define other sections.
			echo "
section windows {
	Subsystem = Windows
}
"
		} >> "./${tmpdir}/${conf}/parity.conf"

		{
			# the second line here is parsed in getenv-parityconf()
			echo "#
# PARITY CONFIGURATION for ${conf}
#
#  Automatically generated by ${SELF##*/}.
#  To regenerate, use ${SELF##*/} --enable ${chost}.
#
PATH=\"${vcPATH}\${PATH:+:}\${PATH}\" export PATH
LIB=\"$(cygpath -mp "${vcLIB}")\${LIB:+;}\${LIB}\" export LIB
INCLUDE=\"$(cygpath -mp "${vcINCLUDE}")\${INCLUDE:+;}\${INCLUDE}\" export INCLUDE
"
		} > "./${tmpdir}/${conf}/parity.sh"

		(
			# change into tmpdir for intermediate object files, but in
			# another subshell to leave above trap in current workdir
			set -e
			cd "./${tmpdir}"

			unset PARITY_CONFIG

			verbose "Compiling ${conf}/lib/libparity.runtime.a ..."
			"${DESTDIR}${CC}" \
				-mparityconfdir=. \
				${parityflags} \
				-I"${DESTDIR}${PARITYincludedir}"/parity.runtime \
				-c \
				-xc "${DESTDIR}${PARITYlibdir}"/parity.runtime/{coreio,diagnose,dirent,dlfcn,getopt,io,libgen,output,pcrt,realpath,regex,setenv,stdio,time,times}.c \
				-xc++ "${DESTDIR}${PARITYlibdir}"/parity.runtime/{cxxeh.cc,ios-fixup.cpp}
			"${DESTDIR}${AR}" \
				-mparityconfdir=. \
				${parityflags} \
				cr "./${conf}/lib/libparity.runtime.a" \
				{coreio,diagnose,dirent,dlfcn,getopt,io,libgen,output,pcrt,realpath,regex,setenv,stdio,time,times,cxxeh,ios-fixup}.o
			verbose "Compiling ${conf}/lib/libparity.runtime.a done."

			verbose "Compiling ${conf}/lib/libparity.loader.a ..."
			"${DESTDIR}${CC}" \
				-mparityconfdir=. \
				${parityflags} \
				-I"${DESTDIR}${PARITYincludedir}"/parity.loader \
				-I"${DESTDIR}${PARITYincludedir}"/parity.runtime \
				-c \
				-xc "${DESTDIR}${PARITYlibdir}"/parity.loader/Loader{Helper,Init,Lazy,Library,Log}.c
			"${DESTDIR}${AR}" \
				-mparityconfdir=. \
				${parityflags} \
				cr "./${conf}/lib/libparity.loader.a" \
				Loader{Helper,Init,Lazy,Library,Log}.o
			verbose "Compiling ${conf}/lib/libparity.loader.a done."
		)

		verbose "Populating ${confdir}/${conf} ..."
		rm -rf "./${conf}"
		mv -f "./${tmpdir}/${conf}" "./${conf}"
	)
	if [[ $? -ne 0 ]]
	then
		noquiet "Updating ${confdir} failed."
		return 1
	fi
	verbose "Updating ${confdir} done."
	return 0
}

getenv-parityconf() {
	local bare=false
	if [[ $1 == '--bare' ]]
	then
		bare=:
		shift
	fi
	local chost=$(get-chost "$1")
	is-supported-chost "${chost}" || return 1
	local vsver=$(get-vsver "${chost}")
	local vsarch=$(get-vsarch "${chost}")
	local vscrt=$(get-vscrt "${chost}")

	verbose "Loading ${PARITYlocalstatedir}/${vsarch}-${vscrt}${vsver}/parity.sh ..."
	(
		${bare} || . "${PARITYlocalstatedir}/${vsarch}-${vscrt}${vsver}/parity.sh"
		while read line
		do
			line=${line%%#*}
			var=${line%%=*}
			[[ ${var} =~ ^[a-zA-Z_][a-zA-Z0-9_]*$ ]] || continue
			if ${bare}; then
				line=${line%%\$*}
				echo "${var} ${line#*=\"}"
			else
				echo "${var} ${!var}"
			fi
		done < "${PARITYlocalstatedir}/${vsarch}-${vscrt}${vsver}/parity.sh"
	)
	verbose "Loading ${PARITYlocalstatedir}/${vsarch}-${vscrt}${vsver}/parity.sh done."
	return 0
}

parityconf-list-supported() {
	verbose() { _verbose "$@" >&2; }
	noquiet() { _verbose "$@" >&2; }
	local chost
	for chost in $(get-supported-chosts)
	do
		echo "${chost}"
	done
	return 0
}

parityconf-list-available() {
	verbose() { _verbose "$@" >&2; }
	noquiet() { _verbose "$@" >&2; }
	query-novcvars-once || die "Cannot get initial environment."

	local chost
	for chost in $(get-supported-chosts)
	do
		if query-vcvars "${chost}"
		then
			echo "${chost}"
		fi
	done
	return 0
}

parityconf-enable() {
	local chosts
	chosts=( $(args-to-chosts "$@") ) || die
	[[ ${#chosts[@]} -lt 1 ]] && die "Need a configuration value (try --list-available)."

	query-novcvars-once || die "Cannot get initial environment."

	local chost
	local failed=()
	for chost in "${chosts[@]}"
	do
		update-parityconf "${chost}" || failed+=("${chost}")
	done
	wait
	if [[ ${#failed[@]} -ne 0 ]]
	then
		noquiet "Enabling configuration failed for ${failed[*]}."
		return 1
	fi
	noquiet "Enabling configurations done."
	return 0
}

parityconf-enable-all() {
	query-novcvars-once || die "Cannot get initial environment."

	local chost
	for chost in $(get-supported-chosts)
	do
		update-parityconf "${chost}" &
	done
	wait
	noquiet "Enabling all available configurations done."
	return 0
}

parityconf-disable() {
	local chosts
	chosts=( $(args-to-chosts "$@") ) || die
	[[ ${#chosts[@]} -lt 1 ]] && die "Need a configuration value (try --list-supported)."

	local chost
	for chost in "${chosts[@]}"
	do
		prune-parityconf "${chost}" &
	done
	wait
	noquiet "Disabling configurations done."
	return 0
}

parityconf-disable-all() {
	local chost
	for chost in $(get-supported-chosts)
	do
		prune-parityconf --reason="disabled" "${chost}"
	done
	noquiet "Disabling all configurations done."
	return 0
}

parityconf-is-available() {
	verbose() { _verbose "$@" >&2; }
	noquiet() { _noquiet "$@" >&2; }
	local chosts
	chosts=( $(args-to-chosts "$@") ) || die
	[[ ${#chosts[@]} -lt 1 ]] && die "Need a configuration value (try --list-available)."

	query-novcvars-once || die "Cannot get even initial environment."

	local chost
	for chost in "${chosts[@]}"
	do
		query-vcvars "${chost}" || return 1
	done
	return 0
}

parityconf-get-environ() {
	verbose() { _verbose "$@" >&2; }
	noquiet() { _noquiet "$@" >&2; }
	local opts=
	while (( $# > 0 ))
	do
		case $1 in
		--bare)
			opts+=" --bare"
			shift
			;;
		*)
			break
			;;
		esac
	done
	local chosts
	chosts=( $(args-to-chosts "$@") ) || die
	[[ ${#chosts[@]} -ne 1 ]] && die "Need a single configuration value (try --list-available)."

	getenv-parityconf ${opts} "${chosts[0]}"

	return 0
}

parityconf-install() {
	local chost
	for chost in $(get-supported-chosts)
	do
		prune-parityconf --reason="disabled" "${chost}"
	done
	return 0
}

parityconf-uninstall() {
	local chost
	for chost in $(get-supported-chosts)
	do
		prune-parityconf --uninstall --reason="uninstalled" "${chost}"
	done
	return $?
}

_verbose() { :; }
_noquiet() { :
    ${1+echo "$@"}
}


# parse options
arg= argvalue=
while ${1+:} false
do
	arg=$1
	shift
	case ${arg} in
	--debug)
		set -x
		;;
	--verbose)
		_verbose() { :
            ${1+echo "$@"}
        }
		_noquiet() { :
            ${1+echo "$@"}
        }
		;;
	--quiet)
		_verbose() { :; }
		_noquiet() { :; }
		;;
	--destdir)
		${1:+:} die "Missing argument to ${arg} (try --help)."
		DESTDIR=$1
		shift
		;;
	--destdir=*)
		argvalue=${arg#--*=}
		DESTDIR=${argvalue}
		;;
	--sysconfdir|--libdir)
		${1:+:} die "Missing argument to ${arg} (try --help)."
		eval "PARITY${arg#--}=\$1"
		shift
		;;
	--sysconfdir=*|--libdir=*)
		argvalue=${arg#--*=}
		arg=${arg%%=*}
		${argvalue:+:} die "Missing argument to ${arg} (try --help)."
		eval "PARITY${arg#--}=\${argvalue}"
		;;
    --remote-execution-support=*)
        argvalue=${arg#--remote-execution-support=}
        case ${PARITYrexsupport},${argvalue} in
        no,*|yes,*) die "Unsupported argument ${arg%%=*} (try --help)." ;;
        *abled,yes) PARITYrexsupport=enabled ;;
        *abled,no) PARITYrexsupport=disabled ;;
        *) die "Invalid argument to ${arg%%=*} (try --help)." ;;
        esac
        ;;
    --remote-execution-support)
        case ${PARITYrexsupport},${1---} in
        no,*|yes,*) die "Unsupported argument ${arg%%=*} (try --help)." ;;
        *abled,--*) PARITYrexsupport=enabled ;;
        *abled,yes) PARITYrexsupport=enabled; shift ;;
        *abled,no) PARITYrexsupport=disabled; shift ;;
        *) die "Invalid argument to ${arg%%=*} (try --help)." ;;
        esac
        ;;
    *)
        break
        ;;
	esac
done

verbose() { _verbose "$@"; }
noquiet() { _noquiet "$@"; }

case ${arg} in
--list-supported|--list-available|--is-available|--get-environ|\
--help|--enable|--enable-all|--disable|--disable-all|\
--install|--uninstall|--unittest)
    action=${arg#--}
    ;;
*)
	usage >&2
	die "Missing or invalid action argument (try --help)."
    ;;
esac

parityconf-${action} ${1+"$@"}

exit $?
