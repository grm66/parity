#!/usr/bin/env bash

# TODO: this is merely a hack to get things rolling - implement as real part of parity.
# TODO: no path conversion in here - only works with relative paths (should be mostly ok).

SELF=$0
PARITYlibexecdir="@PARITY_LIBEXECDIR@"
if [[ ${PARITYlibexecdir} == @*@ ]]
then
	SELFDIR=$(cd "$(dirname "${SELF}")" && pwd)
	PARITYlibexecdir=${SELFDIR}/../parity.setup
fi

source "${PARITYlibexecdir}/parity-environment.sh" || exit 1

opts="$1"
archive="$2"
type unixpath2win >/dev/null 2>&1 || unixpath2win() { cygpath -w "$1"; }
type winpath2unix >/dev/null 2>&1 || winpath2unix() { cygpath -u "$1"; }

archive_win="$(unixpath2win "${archive}")"

shift
shift

_verbose=no
_test=no
_warn_create=yes
_extract=no
_delete=no
_replace=no

for letter in $(echo "${opts}" | grep -o .); do
    case "${letter}" in
    v) _verbose=yes     ;;
    d) _delete=yes      ;;
    t) _test=yes        ;;
    c) _warn_create=no  ;;
    r|q) _replace=yes     ;;
    x) _extract=yes     ;;
    s|u|o|f) echo "warn: ignoring unsupported option '$letter'" ;;
    *) { echo "unrecognized option '$letter'"; exit 1; } ;;
    esac
done

_action_cnt=0
[[ ${_test} == yes ]] && ((_action_cnt++))
[[ ${_extract} == yes ]] && ((_action_cnt++))
[[ ${_delete} == yes ]] && ((_action_cnt++))
[[ ${_replace} == yes ]] && ((_action_cnt++))

if [[ ${_action_cnt} -gt 1 ]]; then
    echo "more than one action given (${_action_cnt}), not valid!"
    exit 1
fi

function wait_for() {
    local f="$1"
    local cnt=100
    [[ -z "${f}" ]] && return
    while [[ ! -e "${f}" && ${cnt} -gt 0 ]]; do
        sleep 0.1
        ((cnt--))
    done
}

# need to redirect stdout/stderr of windows binary via file
lib_exe() { (
    trap "cat .lib_exe.out.$$; cat .lib_exe.err.$$ >&2; rm -f .lib_exe.out.$$ .lib_exe.err.$$" 0
    lib.exe "$@" >> .lib_exe.out.$$ 2>> .lib_exe.err.$$
); }

LIB="lib_exe -nologo"

export TMP=${TMP:-${TMPDIR:-/tmp}}
[[ ${TMP} == /* ]] && TMP=$(unixpath2win "${TMP}")

if [[ ${_test} == yes ]]; then
    ${LIB} /LIST "${archive_win}"
elif [[ ${_replace} == yes ]]; then
    arg_arch=
    [[ ! -e ${archive} && ${_warn_create} == yes ]] && { echo "warning: file does not exist: ${archive}"; };
    [[ -e ${archive} ]] && arg_arch="${archive_win}"
    tmpfile=.ar.tmp.$$
    trap "rm -f '${tmpfile}'" 0
    echo "/OUT:${archive_win}" >> ${tmpfile}
    echo ${arg_arch} >> ${tmpfile}
    for arg in "$@"; do
        [[ ${arg} == /* ]] && arg="$(unixpath2win "${arg}")"
        echo "${arg}" >> ${tmpfile}
    done
    ${LIB} "@${tmpfile}" || exit 1
    wait_for "${archive}"
elif [[ ${_extract} == yes ]]; then
    members=()
    doneOne=no
    for x in "$@"; do
        doneOne=yes
        out="$(basename "$(winpath2unix "${x}")")"
        ${LIB} "${archive_win}" "/EXTRACT:${x}" "/OUT:${out}" || exit 1
        wait_for "${out}"
        [[ ${_verbose} == yes ]] && echo "$x"
    done
    if [[ "${doneOne}" == no ]]; then
        # no memebers given, extract all
        for x in $(${LIB} /LIST "${archive_win}"); do
            x="$(echo "${x}" | tr -d '\r')"
            out="$(basename "$(winpath2unix "${x}")")"
            waitFor=$(basename "$(winpath2unix "$x")")
            ${LIB} "${archive_win}" "/EXTRACT:${x}" "/OUT:${out}" || exit 1
            wait_for "${out}"
            [[ ${_verbose} == yes ]] && echo "$x"
        done
    fi
elif [[ ${_delete} == yes ]]; then
    tmplib="${archive}.old"
    trap "rm -f ${tmplib}" 0
    mv "${archive}" "${tmplib}"
    members=()
    for x in "$@"; do
        members[${#members[@]}]="/REMOVE:${x}"
    done
    ${LIB} "/OUT:${archive_win}" "$(unixpath2win "${tmplib}")" "${members[@]}" || exit 1
fi

exit 0

