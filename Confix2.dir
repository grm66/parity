IGNORE_FILE('config.h')
ADD_EXTRA_DIST('parity.sln')
ADD_EXTRA_DIST('ReleaseNotes.txt')

PARITYsupported_archs = ''
PARITYsupported_versions = ''

parity_setup_in = open('parity.setup/parity-setup.in', 'r')
for line in parity_setup_in.readlines():
	line = line.strip()
	if line.startswith('PARITYsupported_archs="'):
		if not line.startswith('PARITYsupported_archs="@'):
			PARITYsupported_archs=line.split('"')[1]
	if line.startswith('PARITYsupported_versions="'):
		if not line.startswith('PARITYsupported_versions="@'):
			PARITYsupported_versions=line.split('"')[1]
	if PARITYsupported_archs and PARITYsupported_versions:
		break
parity_setup_in = None

CONFIGURE_AC(
	lines=['AC_CONFIG_FILES(parity.setup/parity-setup parity.setup/parity-environment parity.gnu.ar/parity.gnu.ar parity.gnu.nm/parity.gnu.dumpbin)'],
	order=AC_BOILERPLATE)

acm4 = ''
acm4 += 'AC_DEFUN([PARITY_KNOWN_MSVC_ARCHS],       [' + PARITYsupported_archs                      + '])\n'
acm4 += 'AC_DEFUN([PARITY_KNOWN_MSVC_ARCHS_CS],    [' + PARITYsupported_archs   .replace(' ', ',') + '])\n'
acm4 += 'AC_DEFUN([PARITY_KNOWN_MSVC_VERSIONS],    [' + PARITYsupported_versions                   + '])\n'
acm4 += 'AC_DEFUN([PARITY_KNOWN_MSVC_VERSIONS_CS], [' + PARITYsupported_versions.replace(' ', ',') + '])\n'
acm4 += """

AC_DEFUN([PARITY_DIR], [
	prefix_NONE=
	exec_prefix_NONE=
	test "x$prefix" = xNONE && prefix_NONE=yes && prefix=$ac_default_prefix
	test "x$exec_prefix" = xNONE && exec_prefix_NONE=yes && exec_prefix=$prefix
	eval ac_define_dir="\"[$]$2\""
	eval ac_define_dir="\"$ac_define_dir\""
	AC_SUBST($1, "$ac_define_dir")
	AC_DEFINE_UNQUOTED($1, "$ac_define_dir", [$3])
	test "$prefix_NONE" && prefix=NONE
	test "$exec_prefix_NONE" && exec_prefix=NONE
])

AC_DEFUN([PARITY_CONFIGURE],
[
	PARITY_DIR([PARITY_SYSCONFDIR], ['${sysconfdir}/${PACKAGE}'],
		[Path where configuration is installed])
	PARITY_DIR([PARITY_INCLUDEDIR], ['${includedir}'],
		[Path where header files are installed])
	PARITY_DIR([PARITY_LIBDIR], ['${libdir}/${PACKAGE}'],
		[Path where libraries are installed])
	PARITY_DIR([PARITY_BINDIR], ['${bindir}'],
		[Path where executables are installed])
	AC_SUBST([LN_S], [${as_ln_s}])

	AC_MSG_CHECKING([for MSVC architectures to support])
	AC_ARG_ENABLE([msvc-archs],
	  [AS_HELP_STRING([--enable-msvc-archs=@<:@PARITY_KNOWN_MSVC_ARCHS_CS@:>@],
		[MSVC architectures to compile in support for. Default is all of them.])],
	  [enable_msvc_archs=$enableval],
	  [enable_msvc_archs="PARITY_KNOWN_MSVC_ARCHS_CS"])
	parity_enabled_msvc_archs=
	as_save_IFS=$IFS
	IFS=", "
	for parityarch in ${enable_msvc_archs:-PARITY_KNOWN_MSVC_ARCHS}
	do
	  IFS=$as_save_IFS
	  AS_CASE([" ]PARITY_KNOWN_MSVC_ARCHS[ "],
		[*" $parityarch "*], [],
		[AS_CASE([$parityarch],
		  [yes|no], [AC_MSG_ERROR([Need specific argument to --enable-msvc-archs.])],
		  [AC_MSG_ERROR([Unknown argument $parityarch to --enable-msvc-archs.])])])
	  parity_enabled_msvc_archs="$parity_enabled_msvc_archs $parityarch "
	done
	IFS=$as_save_IFS
	enable_msvc_archs=
	# sort unique
	for parityarch in PARITY_KNOWN_MSVC_ARCHS
	do
	  AS_CASE([$parity_enabled_msvc_archs],
		[*" $parityarch "*],
		  [AS_CASE([" $enable_msvc_archs "],
			[*" $parityarch "*], [],
			["  "], [enable_msvc_archs=$parityarch],
			[enable_msvc_archs="$enable_msvc_archs $parityarch"])])
	done
	AC_SUBST([PARITY_SUPPORTED_ARCHS], [$enable_msvc_archs])
	AC_DEFINE_UNQUOTED([PARITY_DEFAULT_ARCH], ["${enable_msvc_archs%% *}"],
	  [Fallback MSVC architecture.])
	AC_MSG_RESULT([$PARITY_SUPPORTED_ARCHS])

	AC_MSG_CHECKING([for MSVC versions to support])
	AC_ARG_ENABLE([msvc-versions],
	  [AS_HELP_STRING([--enable-msvc-versions=@<:@PARITY_KNOWN_MSVC_VERSIONS_CS@:>@],
	    [MSVC versions to compile in support for. Defaults to all of them.])],
	  [enable_msvc_versions=$enableval],
	  [enable_msvc_versions="PARITY_KNOWN_MSVC_VERSIONS_CS"])
	parity_enabled_msvc_versions=
	as_save_IFS=$IFS
	IFS=", "
	for paritymsvcver in ${enable_msvc_versions:-PARITY_KNOWN_MSVC_VERSIONS}
	do
	  IFS=$as_save_IFS
	  AS_CASE([" PARITY_KNOWN_MSVC_VERSIONS "],
		[*" $paritymsvcver "*], [],
		[AS_CASE([$paritymsvcver],
		  [yes|no], [AC_MSG_ERROR([Need specific argument to --enable-msvc-versions.])],
		  [AC_MSG_ERROR([Unknown argument $paritymsvcver to --enable-msvc-versions.])])])
	  parity_enabled_msvc_versions="$parity_enabled_msvc_versions $paritymsvcver "
	done
	IFS=$as_save_IFS
	# sort unique
	enable_msvc_versions=
	for paritymsvcver in PARITY_KNOWN_MSVC_VERSIONS
	do
	  AS_CASE([$parity_enabled_msvc_versions],
		[*" $paritymsvcver "*],
		  [AS_CASE([" $enable_msvc_versions "],
			[*" $paritymsvcver "*], [],
			["  "], [enable_msvc_versions=$paritymsvcver],
			[enable_msvc_versions="$enable_msvc_versions $paritymsvcver"])])
	done
	AC_SUBST([PARITY_SUPPORTED_VERSIONS], [$enable_msvc_versions])
	AC_MSG_RESULT([$enable_msvc_versions])

    AC_MSG_CHECKING([whether to support host triplet without MSVC version])
    AC_ARG_ENABLE([default-msvc-version],
      [AS_HELP_STRING([--disable-default-msvc-version],
        [Disable support for the host triplet without an MSVC version.])],
      [enable_default_msvc_version=$enableval],
      [enable_default_msvc_version=yes])
	AS_CASE([$enable_default_msvc_version],
	  [yes], [PARITY_SUPPORTS_DEFAULT_MSVC_VERSION=:],
	  [no], [PARITY_SUPPORTS_DEFAULT_MSVC_VERSION=false],
	  [AC_MSG_ERROR([Invalid argument $enableval to --enable-default-msvc-version.])])
    AC_SUBST([PARITY_SUPPORTS_DEFAULT_MSVC_VERSION])
    AC_MSG_RESULT([$enable_default_msvc_version])

	AC_MSG_CHECKING([whether to support Remote EXecution service])
	AC_ARG_WITH([default-remote-execution-support],
	  [AS_HELP_STRING([--with-remote-execution-support=[[yes|no|enabled|disabled]]],
		[Support for Remote EXecution service (https://github.com/mduft/rex)
		can be either always enabled (yes), completely disabled (no),
		disabled later using parity-setup (enabled), or enabled later
		using parity-setup (disabled, default).])],
	  [AS_CASE([$withval],[yes|no|enabled|disabled],[],
		[AC_MSG_ERROR([Invalid argument to --with-default-remote-execution-support.])])],
	  [with_default_remote_execution_support=disabled])
	AC_SUBST([PARITY_REX_SUPPORT], [$with_default_remote_execution_support])
	AS_CASE([$with_default_remote_execution_support],
	  [yes],[AC_DEFINE([PARITY_REX_SUPPORT], [1 /* forced */], [Support Remote EXecution service])],
	  [*abled],[AC_DEFINE([PARITY_REX_SUPPORT], [0 /* probably */])])
	AC_MSG_RESULT([$with_default_remote_execution_support])
])

"""

ACINCLUDE_M4(lines=[acm4])

CONFIGURE_AC(
	lines=['PARITY_CONFIGURE'],
	order=AC_PROGRAMS)

CONFIGURE_AC(
    lines=['ACX_PTHREAD'],
    order=AC_PROGRAMS)

import os
import re

_re_cfile = re.compile('^.*\\.(c|cc|cpp)$')
_re_hfile = re.compile('^.*\\.h$')
_re_invalid_variable_character = re.compile('[^a-zA-Z0-9]')

for dir in [
	'parity.runtime',
	'parity.runtime/internal',
	'parity.runtime/sys',
	'parity.loader',
]:
	dirvar = re.sub(_re_invalid_variable_character, '_', dir)
	MAKEFILE_AM(line=dirvar + 'dir = $(PARITY_LIBDIR)/' + dir)
	MAKEFILE_AM(line=dirvar + 'includedir = $(PARITY_LIBDIR)/include/' + dir)
	ADD_EXTRA_DIST('$(' + dirvar + '_DATA)')
	ADD_EXTRA_DIST('$(' + dirvar + 'include_DATA)')
	libcfiles = []
	libhfiles = []
	for file in os.listdir(dir):
		if os.path.isfile(dir + '/' + file):
			if _re_cfile.match(file):
				libcfiles.append(dir + '/' + file)
			if _re_hfile.match(file):
				libhfiles.append(dir + '/' + file)
	MAKEFILE_AM(line=dirvar + '_DATA = ' + ' \\\n\t'.join(libcfiles))
	MAKEFILE_AM(line=dirvar + 'include_DATA = ' + ' \\\n\t'.join(libhfiles))

MAKEFILE_AM(line='''
install-setup-files: install-recursive
	chosts=`"$(DESTDIR)$(bindir)/parity-setup" --list-supported`; \\
	defchosts=`"$(DESTDIR)$(bindir)/parity-setup" --list-supported --default`; \\
	cd "$(DESTDIR)$(bindir)" || exit $$? ; \\
	for chost in $${chosts} $${defchosts} ; do \\
		$(LN_S) -f parity.gnu.gcc$(EXEEXT) $${chost}-gcc || exit $$? ; \\
		$(LN_S) -f parity.gnu.gcc$(EXEEXT) $${chost}-g++ || exit $$? ; \\
		$(LN_S) -f parity.gnu.ld$(EXEEXT) $${chost}-ld || exit $$? ; \\
		$(LN_S) -f parity.gnu.windres$(EXEEXT) $${chost}-windres || exit $$? ; \\
		$(LN_S) -f parity.gnu.ar $${chost}-ar || exit $$? ; \\
		$(LN_S) -f parity.gnu.strip $${chost}-strip || exit $$? ; \\
		$(LN_S) -f parity.gnu.dumpbin $${chost}-dumpbin || exit $$? ; \\
		$(LN_S) -f parity.gnu.ranlib $${chost}-ranlib || exit $$? ; \\
		$(LN_S) -f parity.ms.cl$(EXEEXT) $${chost}-cl || exit $$? ; \\
		$(LN_S) -f parity.ms.link$(EXEEXT) $${chost}-link || exit $$? ; \\
	done ; \\
	for chost in $${defchosts} ; do \\
		$(MKDIR_P) "$(DESTDIR)$(exec_prefix)/$${chost}/bin" || exit $$? ; \\
		cd "$(DESTDIR)$(exec_prefix)/$${chost}/bin" || exit $$? ; \\
		trap "rm -f '$(DESTDIR)$(exec_prefix)/$${chost}/bin/parityscript'" 0 || exit $$? ; \
		case $${chost%%-*} in \\
		x64|x86_64|amd64) mopt=-m64 ;; \\
		x86|i?86*) mopt=-m32 ;; \\
		esac ; \\
		for exe in gcc ld windres ar dumpbin ranlib ; do \\
			{ echo "#! /bin/sh" ; \\
			  echo "exec '$(bindir)/parity.gnu.$${exe}' $${mopt} "'"$$@"' ; \\
			} > parityscript || exit $$? ; \\
			$(INSTALL_SCRIPT) parityscript "$(DESTDIR)$(exec_prefix)/$${chost}/bin/$${exe}" || exit $$? ; \\
			rm -f parityscript || exit $$? ; \\
		done ; \\
		{ echo "#! /bin/sh" ; \\
		  echo "exec '$(bindir)/parity.gnu.gcc' $${mopt} "'"$$@"' ; \\
		} > parityscript || exit $$? ; \\
		$(INSTALL_SCRIPT) parityscript "$(DESTDIR)$(exec_prefix)/$${chost}/bin/g++" || exit $$? ; \\
		rm -f parityscript || exit $$? ; \\
		for exe in cl link ; do \\
			{ echo "#! /bin/sh" ; \\
			  echo "exec '$(bindir)/parity.ms.$${exe}' $${mopt} "'"$$@"' ; \\
			} > parityscript || exit $$? ; \\
			$(INSTALL_SCRIPT) parityscript "$(DESTDIR)$(exec_prefix)/$${chost}/bin/$${exe}" || exit $$? ; \\
			rm -f parityscript || exit $$? ; \\
		done ; \\
	done
	"$(DESTDIR)$(bindir)/parity-setup" --destdir="$(DESTDIR)" --install
	test -n "$(DESTDIR)" || "$(bindir)/parity-setup" --enable-all

install: install-setup-files

uninstall-setup-files:
	chosts=`"$(DESTDIR)$(bindir)/parity-setup" --list-supported; "$(DESTDIR)$(bindir)/parity-setup" --list-supported --default`; \\
	cd "$(DESTDIR)$(bindir)" || exit 0 ; \\
	for chost in $${chosts}; do \\
		rm -f $${chost}-gcc ; \\
		rm -f $${chost}-g++ ; \\
		rm -f $${chost}-ld ; \\
		rm -f $${chost}-windres ; \\
		rm -f $${chost}-ar ; \\
		rm -f $${chost}-dumpbin ; \\
		rm -f $${chost}-ranlib ; \\
		rm -f $${chost}-cl ; \\
		rm -f $${chost}-link ; \\
	done ; :
	"$(DESTDIR)$(bindir)/parity-setup" --destdir="$(DESTDIR)" --uninstall ; :

uninstall-recursive: uninstall-setup-files
''')
