IGNORE_FILE('config.h')
ADD_EXTRA_DIST('parity.sln')
ADD_EXTRA_DIST('ReleaseNotes.txt')

PARITYsupported_archs = ''
PARITYsupported_versions = ''
PARITYsupported_runtimes = ''

parity_setup_in = open('parity.setup/parity-setup.in', 'r')
for line in parity_setup_in.readlines():
	line = line.strip()
	if line.startswith('PARITYsupported_archs="'):
		if not line.startswith('PARITYsupported_archs="@'):
			PARITYsupported_archs=line.split('"')[1]
	if line.startswith('PARITYsupported_versions="'):
		if not line.startswith('PARITYsupported_versions="@'):
			PARITYsupported_versions=line.split('"')[1]
	if line.startswith('PARITYsupported_runtimes="'):
		if not line.startswith('PARITYsupported_runtimes="@'):
			PARITYsupported_runtimes=line.split('"')[1]
	if PARITYsupported_archs and PARITYsupported_versions and PARITYsupported_runtimes:
		break
parity_setup_in = None

CONFIGURE_AC(
	lines=['AC_CONFIG_FILES( \
				parity.setup/parity-setup \
				parity.setup/parity-environment.sh \
				parity.gnu.ar/parity.gnu.ar \
				parity.gnu.nm/parity.gnu.dumpbin \
				parity.gnu.nm/parity.gnu.nm \
				parity.ms.link/parity.ms.lib \
				parity.ms.link/parity.ms.nmake \
				parity.ms.link/parity.ms.rc \
		  )'],
	order=AC_BOILERPLATE)

acm4 = ''
acm4 += 'AC_DEFUN([PARITY_KNOWN_MSVC_ARCHS],       [' + PARITYsupported_archs                      + '])\n'
acm4 += 'AC_DEFUN([PARITY_KNOWN_MSVC_ARCHS_CS],    [' + PARITYsupported_archs   .replace(' ', ',') + '])\n'
acm4 += 'AC_DEFUN([PARITY_KNOWN_MSVC_VERSIONS],    [' + PARITYsupported_versions                   + '])\n'
acm4 += 'AC_DEFUN([PARITY_KNOWN_MSVC_VERSIONS_CS], [' + PARITYsupported_versions.replace(' ', ',') + '])\n'
acm4 += 'AC_DEFUN([PARITY_KNOWN_MSVC_RUNTIMES],    [' + PARITYsupported_runtimes                   + '])\n'
acm4 += 'AC_DEFUN([PARITY_KNOWN_MSVC_RUNTIMES_CS], [' + PARITYsupported_runtimes.replace(' ', ',') + '])\n'
acm4 += """

AC_DEFUN([PARITY_DIR], [
	prefix_NONE=
	exec_prefix_NONE=
	test "x$prefix" = xNONE && prefix_NONE=yes && prefix=$ac_default_prefix
	test "x$exec_prefix" = xNONE && exec_prefix_NONE=yes && exec_prefix=$prefix
	eval ac_define_dir="\"[$]$2\""
	eval ac_define_dir="\"$ac_define_dir\""
	AC_SUBST($1, "$ac_define_dir")
	AC_DEFINE_UNQUOTED($1, "$ac_define_dir", [$3])
	test "$prefix_NONE" && prefix=NONE
	test "$exec_prefix_NONE" && exec_prefix=NONE
])

AC_DEFUN([PARITY_CONFIGURE],
[
	PARITY_DIR([PARITY_SYSCONFDIR], ['${sysconfdir}/${PACKAGE}'],
		[Path where user specific configuration is installed])
	PARITY_DIR([PARITY_LOCALSTATEDIR], ['${localstatedir}/${PACKAGE}'],
		[Path where site specific configuration is maintained])
	PARITY_DIR([PARITY_INCLUDEDIR], ['${libdir}/${PACKAGE}/include'],
		[Path where internal header files are installed])
	PARITY_DIR([PARITY_LIBDIR], ['${libdir}/${PACKAGE}'],
		[Path where internal libraries are installed])
	PARITY_DIR([PARITY_LIBEXECDIR], ['${libexecdir}/${PACKAGE}'],
		[Path where internal executables are installed])
	PARITY_DIR([PARITY_BINDIR], ['${bindir}'],
		[Path where executables are installed])
	AC_SUBST([LN_S], [${as_ln_s}])

	AC_MSG_CHECKING([for MSVC architectures to support])
	AC_ARG_ENABLE([msvc-archs],
	  [AS_HELP_STRING([--enable-msvc-archs=@<:@PARITY_KNOWN_MSVC_ARCHS_CS@:>@],
		[MSVC architectures to compile in support for. Default is all of them.])],
	  [enable_msvc_archs=$enableval],
	  [enable_msvc_archs="PARITY_KNOWN_MSVC_ARCHS_CS"])
	parity_enabled_msvc_archs=
	as_save_IFS=$IFS
	IFS=", "
	for parityarch in ${enable_msvc_archs:-PARITY_KNOWN_MSVC_ARCHS}
	do
	  IFS=$as_save_IFS
	  AS_CASE([" ]PARITY_KNOWN_MSVC_ARCHS[ "],
		[*" $parityarch "*], [],
		[AS_CASE([$parityarch],
		  [yes|no], [AC_MSG_ERROR([Need specific argument to --enable-msvc-archs.])],
		  [AC_MSG_ERROR([Unknown argument $parityarch to --enable-msvc-archs.])])])
	  parity_enabled_msvc_archs="$parity_enabled_msvc_archs $parityarch "
	done
	IFS=$as_save_IFS
	enable_msvc_archs=
	# sort unique
	for parityarch in PARITY_KNOWN_MSVC_ARCHS
	do
	  AS_CASE([$parity_enabled_msvc_archs],
		[*" $parityarch "*],
		  [AS_CASE([" $enable_msvc_archs "],
			[*" $parityarch "*], [],
			["  "], [enable_msvc_archs=$parityarch],
			[enable_msvc_archs="$enable_msvc_archs $parityarch"])])
	done
	AC_SUBST([PARITY_SUPPORTED_ARCHS], [$enable_msvc_archs])
	AC_MSG_RESULT([$PARITY_SUPPORTED_ARCHS])

	AC_MSG_CHECKING([for MSVC versions to support])
	AC_ARG_ENABLE([msvc-versions],
	  [AS_HELP_STRING([--enable-msvc-versions=@<:@PARITY_KNOWN_MSVC_VERSIONS_CS@:>@],
	    [MSVC versions to compile in support for. Defaults to all of them.])],
	  [enable_msvc_versions=$enableval],
	  [enable_msvc_versions="PARITY_KNOWN_MSVC_VERSIONS_CS"])
	parity_enabled_msvc_versions=
	as_save_IFS=$IFS
	IFS=", "
	for paritymsvcver in ${enable_msvc_versions:-PARITY_KNOWN_MSVC_VERSIONS}
	do
	  IFS=$as_save_IFS
	  AS_CASE([" PARITY_KNOWN_MSVC_VERSIONS "],
		[*" $paritymsvcver "*], [],
		[AS_CASE([$paritymsvcver],
		  [yes|no], [AC_MSG_ERROR([Need specific argument to --enable-msvc-versions.])],
		  [AC_MSG_ERROR([Unknown argument $paritymsvcver to --enable-msvc-versions.])])])
	  parity_enabled_msvc_versions="$parity_enabled_msvc_versions $paritymsvcver "
	done
	IFS=$as_save_IFS
	# sort unique
	enable_msvc_versions=
	for paritymsvcver in PARITY_KNOWN_MSVC_VERSIONS
	do
	  AS_CASE([$parity_enabled_msvc_versions],
		[*" $paritymsvcver "*],
		  [AS_CASE([" $enable_msvc_versions "],
			[*" $paritymsvcver "*], [],
			["  "], [enable_msvc_versions=$paritymsvcver],
			[enable_msvc_versions="$enable_msvc_versions $paritymsvcver"])])
	done
	AC_SUBST([PARITY_SUPPORTED_VERSIONS], [$enable_msvc_versions])
	AC_MSG_RESULT([$enable_msvc_versions])

	AC_MSG_CHECKING([for MSVC runtime variants to support])
	AC_ARG_ENABLE([msvc-runtimes],
	  [AS_HELP_STRING([--enable-msvc-runtimes=@<:@PARITY_KNOWN_MSVC_RUNTIMES_CS@:>@],
	    [MSVC runtimes to compile in support for. Defaults to all of them.])],
	  [enable_msvc_runtimes=$enableval],
	  [enable_msvc_runtimes="PARITY_KNOWN_MSVC_RUNTIMES_CS"])
	parity_enabled_msvc_runtimes=
	as_save_IFS=$IFS
	IFS=", "
	for paritymsvccrt in ${enable_msvc_runtimes:-PARITY_KNOWN_MSVC_RUNTIMES}
	do
	  IFS=$as_save_IFS
	  AS_CASE([" PARITY_KNOWN_MSVC_RUNTIMES "],
		[*" $paritymsvccrt "*], [],
		[AS_CASE([$paritymsvccrt],
		  [yes|no], [AC_MSG_ERROR([Need specific argument to --enable-msvc-runtimes.])],
		  [AC_MSG_ERROR([Unknown argument $paritymsvccrt to --enable-msvc-runtimes.])])])
	  parity_enabled_msvc_runtimes="$parity_enabled_msvc_runtimes $paritymsvccrt "
	done
	IFS=$as_save_IFS
	# sort unique
	enable_msvc_runtimes=
	for paritymsvccrt in PARITY_KNOWN_MSVC_RUNTIMES
	do
	  AS_CASE([$parity_enabled_msvc_runtimes],
		[*" $paritymsvccrt "*],
		  [AS_CASE([" $enable_msvc_runtimes "],
			[*" $paritymsvccrt "*], [],
			["  "], [enable_msvc_runtimes=$paritymsvccrt],
			[enable_msvc_runtimes="$enable_msvc_runtimes $paritymsvccrt"])])
	done
	AC_SUBST([PARITY_SUPPORTED_RUNTIMES], [$enable_msvc_runtimes])
	AC_MSG_RESULT([$enable_msvc_runtimes])

	AC_MSG_CHECKING([whether to support Remote EXecution service])
	AC_ARG_WITH([default-remote-execution-support],
	  [AS_HELP_STRING([--with-remote-execution-support=[[yes|no|enabled|disabled]]],
		[Support for Remote EXecution service (https://github.com/mduft/rex)
		can be either always enabled (yes), completely disabled (no),
		disabled later using parity-setup (enabled), or enabled later
		using parity-setup (disabled, default).])],
	  [AS_CASE([$withval],[yes|no|enabled|disabled],[],
		[AC_MSG_ERROR([Invalid argument to --with-default-remote-execution-support.])])],
	  [with_default_remote_execution_support=disabled])
	AC_SUBST([PARITY_REX_SUPPORT], [$with_default_remote_execution_support])
	AS_CASE([$with_default_remote_execution_support],
	  [yes],[AC_DEFINE([PARITY_REX_SUPPORT], [1 /* forced */], [Support Remote EXecution service])],
	  [*abled],[AC_DEFINE([PARITY_REX_SUPPORT], [0 /* probably */])])
	AC_MSG_RESULT([$with_default_remote_execution_support])
])

"""

ACINCLUDE_M4(lines=[acm4])

CONFIGURE_AC(
	lines=['PARITY_CONFIGURE'],
	order=AC_PROGRAMS)

CONFIGURE_AC(
    lines=['ACX_PTHREAD'],
    order=AC_PROGRAMS)

import os
import re

_re_cfile = re.compile('^.*\\.(c|cc|cpp)$')
_re_hfile = re.compile('^.*\\.h$')
_re_invalid_variable_character = re.compile('[^a-zA-Z0-9]')

for dir in [
	'parity.runtime',
	'parity.runtime/internal',
	'parity.runtime/sys',
	'parity.loader',
]:
	dirvar = re.sub(_re_invalid_variable_character, '_', dir)
	MAKEFILE_AM(line=dirvar + 'dir = $(PARITY_LIBDIR)/' + dir)
	MAKEFILE_AM(line=dirvar + 'includedir = $(PARITY_INCLUDEDIR)/' + dir)
	ADD_EXTRA_DIST('$(' + dirvar + '_DATA)')
	ADD_EXTRA_DIST('$(' + dirvar + 'include_DATA)')
	libcfiles = []
	libhfiles = []
	for file in os.listdir(dir):
		if os.path.isfile(dir + '/' + file):
			if _re_cfile.match(file):
				libcfiles.append(dir + '/' + file)
			if _re_hfile.match(file):
				libhfiles.append(dir + '/' + file)
	MAKEFILE_AM(line=dirvar + '_DATA = ' + ' \\\n\t'.join(libcfiles))
	MAKEFILE_AM(line=dirvar + 'include_DATA = ' + ' \\\n\t'.join(libhfiles))

MAKEFILE_AM(line='''

GNUCOMMANDS = \
	gcc:gcc$(EXEEXT) \
	g++:gcc$(EXEEXT) \
	ld:ld$(EXEEXT) \
	windres:windres$(EXEEXT) \
	ar \
	dumpbin \
	nm \
	ranlib \
	strip

MSCOMMANDS = \
	cl$(EXEEXT) \
	link$(EXEEXT) \
	lib$(EXEEXT):lib \
	nmake$(EXEEXT):nmake \
	rc$(EXEEXT):rc

install-setup-files: install-recursive
	chosts=`"$(DESTDIR)$(bindir)/parity-setup" --list-supported`; \\
	cd "$(DESTDIR)$(bindir)" || exit $$? ; \\
	for chost in $${chosts} ; do \\
		$(MKDIR_P) "$(DESTDIR)$(exec_prefix)/$${chost}/bin" || exit $$? ; \\
		cd "$(DESTDIR)$(exec_prefix)/$${chost}/bin" || exit $$? ; \\
		case $${chost%%-*} in \\
		x64|x86_64|amd64) mopt=-m64 ;; \\
		x86|i?86*) mopt=-m32 ;; \\
		esac ; \\
		case $${chost} in \\
		*-libcmtd*) mcrt="libcmtd" ;; \\
		*-libcmt*) mcrt="libcmt" ;; \\
		*-msvcd*) mcrt="msvcd" ;; \\
		*) mcrt="msvc" ;; \\
		esac ; \\
		mver=$${chost#*-$${mcrt}} ; \\
		mver=$${mver%%-*} ; \\
		mopt="$${mopt} -m$${mcrt}$${mver}" ; \\
		for exe in $(GNUCOMMANDS) ; do \\
			set -- `IFS=: eval 'echo $${exe} $${exe}'` ; \\
			echo "creating $(DESTDIR)$(exec_prefix)/$${chost}/bin/$$1 with $${mopt}" ; \\
			$(CC) $(CFLAGS) "$(DESTDIR)$(parity_runtimedir)/optswrap.c" -o $$1 -DWRAP_REALBIN="$(bindir)/parity.gnu.$$2" -DWRAP_OPTIONS="$${mopt}" || exit $$? ; \\
			echo "creating $(DESTDIR)$(bindir)/$${chost}-$$1" ; \\
			cp -f $$1 "$(DESTDIR)$(bindir)/$${chost}-$$1" || exit $$? ; \\
		done ; \\
		for exe in $(MSCOMMANDS) ; do \\
			set -- `IFS=: eval 'echo $${exe} $${exe}'` ; \\
			echo "creating $(DESTDIR)$(exec_prefix)/$${chost}/bin/$$1 with $${mopt}" ; \\
			$(CC) $(CFLAGS) "$(DESTDIR)$(parity_runtimedir)/optswrap.c" -o $$1 -DWRAP_REALBIN="$(bindir)/parity.ms.$$2" -DWRAP_OPTIONS="$${mopt}" || exit $$? ; \\
			echo "creating $(DESTDIR)$(bindir)/$${chost}-$$1" ; \\
			cp -f $$1 "$(DESTDIR)$(bindir)/$${chost}-$$1" || exit $$? ; \\
		done ; \\
		echo "creating $(DESTDIR)$(exec_prefix)/$${chost}/bin/cmd.exe" ; \\
		$(CC) $(CFLAGS) "$(DESTDIR)$(parity_runtimedir)/optswrap.c" -o cmd.exe -DWRAP_REALBIN="`cygpath -S`/cmd.exe" -DWRAP_OPTIONS= || exit $$? ; \\
		rm -f paritywrapper.c || exit $$? ; \\
	done
	$(MKDIR_P) "$(DESTDIR)$(localstatedir)"
	"$(DESTDIR)$(bindir)/parity-setup" --destdir="$(DESTDIR)" --install
	test -n "$(DESTDIR)" || "$(bindir)/parity-setup" --enable-all

install: install-setup-files

uninstall-setup-files:
	chosts=`"$(DESTDIR)$(bindir)/parity-setup" --list-supported`; \\
	for chost in $${chosts}; do \\
		if cd "$(DESTDIR)$(bindir)" ; then \\
			for exe in $(GNUCOMMANDS) $(MSCOMMANDS) ; do \\
				set -- `IFS=: eval 'echo $${exe}'` ; \\
				rm -f $${chost}-$$1 ; \\
			done ; \\
		fi ; \\
		if cd "$(DESTDIR)$(exec_prefix)/$${chost}/bin" ; then \\
			for exe in $(GNUCOMMANDS) $(MSCOMMANDS) ; do \\
				set -- `IFS=: eval 'echo $${exe}'` ; \\
				rm -f $$1 ; \\
			done ; \\
			rm -f cmd.exe ; \\
		fi ; \\
	done ; :
	"$(DESTDIR)$(bindir)/parity-setup" --destdir="$(DESTDIR)" --uninstall ; :

uninstall-recursive: uninstall-setup-files
''')
